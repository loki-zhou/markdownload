chrome.runtime.onMessage.addListener(async (message) => {
  if (message.target !== 'offscreen') {
    return;
  }

  switch (message.type) {
    case 'parse-dom': {
      // Handle both old format (string) and new format (object with domString and originalUrl)
      let domString, originalUrl;
      if (typeof message.data === 'string') {
        // Backward compatibility: old format where data is just the DOM string
        domString = message.data;
        originalUrl = null;
      } else {
        // New format: data is an object with domString and originalUrl
        domString = message.data.domString;
        originalUrl = message.data.originalUrl;
      }
      
      const article = await getArticleFromDom(domString, originalUrl);
      chrome.runtime.sendMessage({ type: 'parse-dom-result', data: article });
      break;
    }
    case 'turndown-request': {
      const { content, options, article } = message.data;
      const result = turndown(content, options, article);
      chrome.runtime.sendMessage({ type: 'turndown-result', data: result });
      break;
    }
    case 'pre-download-images': {
      const { imageList, markdown, options } = message.data;
      const result = await preDownloadImages(imageList, markdown, options);
      chrome.runtime.sendMessage({ type: 'pre-download-images-result', data: result });
      break;
    }
    case 'create-object-url': {
      const blob = message.data;
      const url = URL.createObjectURL(blob);
      chrome.runtime.sendMessage({ type: 'create-object-url-result', data: url });
      break;
    }
    case 'revoke-blob-url': {
      URL.revokeObjectURL(message.data);
      break;
    }
  }
});

TurndownService.prototype.defaultEscape = TurndownService.prototype.escape;

async function getArticleFromDom(domString, originalUrl = null) {
  // parse the dom
  const parser = new DOMParser();
  const dom = parser.parseFromString(domString, "text/html");

  if (dom.documentElement.nodeName == "parsererror") {
    console.error("error while parsing");
  }

  // Set the base URI correctly if we have the original URL
  // This is crucial for proper relative link resolution
  if (originalUrl) {
    try {
      // Ensure we have a valid base element with the correct href
      let baseElement = dom.head?.querySelector('base');
      if (!baseElement) {
        baseElement = dom.createElement('base');
        if (dom.head) {
          dom.head.appendChild(baseElement);
        }
      }
      baseElement.href = originalUrl;
      
      // Also set the document's baseURI property if possible
      // Note: This might not work in all browsers, but we try anyway
      if (dom.baseURI !== originalUrl) {
        Object.defineProperty(dom, 'baseURI', {
          value: originalUrl,
          writable: false,
          configurable: true
        });
      }
    } catch (error) {
      console.warn('Failed to set base URI:', error);
    }
  }

  const math = {};

  const storeMathInfo = (el, mathInfo) => {
    let randomId = URL.createObjectURL(new Blob([]));
    randomId = randomId.substring(randomId.length - 36);
    el.id = randomId;
    math[randomId] = mathInfo;
  };

  dom.body.querySelectorAll('script[id^=MathJax-Element-]')?.forEach(mathSource => {
    const type = mathSource.attributes.type.value
    storeMathInfo(mathSource, {
      tex: mathSource.innerText,
      inline: type ? !type.includes('mode=display') : false
    });
  });

  dom.body.querySelectorAll('[markdownload-latex]')?.forEach(mathJax3Node =>  {
    const tex = mathJax3Node.getAttribute('markdownload-latex')
    const display = mathJax3Node.getAttribute('display')
    const inline = !(display && display === 'true')

    const mathNode = document.createElement(inline ? "i" : "p")
    mathNode.textContent = tex;
    mathJax3Node.parentNode.insertBefore(mathNode, mathJax3Node.nextSibling)
    mathJax3Node.parentNode.removeChild(mathJax3Node)

    storeMathInfo(mathNode, {
      tex: tex,
      inline: inline
    });
  });

  dom.body.querySelectorAll('.katex-mathml')?.forEach(kaTeXNode => {
    storeMathInfo(kaTeXNode, {
      tex: kaTeXNode.querySelector('annotation').textContent,
      inline: true
    });
  });

  dom.body.querySelectorAll('[class*=highlight-text],[class*=highlight-source]')?.forEach(codeSource => {
    const language = codeSource.className.match(/highlight-(?:text|source)-([a-z0-9]+)/)?.[1]
    if (codeSource.firstChild.nodeName == "PRE") {
      codeSource.firstChild.id = `code-lang-${language}`
    }
  });

  dom.body.querySelectorAll('[class*=language-]')?.forEach(codeSource => {
    const language = codeSource.className.match(/language-([a-z0-9]+)/)?.[1]
    codeSource.id = `code-lang-${language}`;
  });

  dom.body.querySelectorAll('pre br')?.forEach(br => {
    // we need to keep <br> tags because they are removed by Readability.js
    br.outerHTML = '<br-keep></br-keep>';
  });

  dom.body.querySelectorAll('.codehilite > pre')?.forEach(codeSource => {
    if (codeSource.firstChild.nodeName !== 'CODE' && !codeSource.className.includes('language')) {
      codeSource.id = `code-lang-text`;
    }
  });

  dom.body.querySelectorAll('h1, h2, h3, h4, h5, h6')?.forEach(header => {
    // Readability.js will strip out headings from the dom if certain words appear in their className
    // See: https://github.com/mozilla/readability/issues/807  
    header.className = '';
    header.outerHTML = header.outerHTML;  
  });

  // Prevent Readability from removing the <html> element if has a 'class' attribute
  // which matches removal criteria.
  // Note: The document element is guaranteed to be the HTML tag because the 'text/html'
  // mime type was used when the DOM was created.
  dom.documentElement.removeAttribute('class')

  // simplify the dom into an article
  const article = new Readability(dom).parse();

  // get the base uri from the dom and attach it as important article info
  // Use originalUrl if available, otherwise fall back to dom.baseURI
  // IMPORTANT: dom.baseURI in offscreen context might be chrome-extension:// protocol
  // so we need to be careful about using it
  let effectiveBaseURI;
  console.log('DEBUG: originalUrl =', originalUrl);
  console.log('DEBUG: dom.baseURI =', dom.baseURI);
  
  if (originalUrl) {
    effectiveBaseURI = originalUrl;
    console.log('DEBUG: Using originalUrl as baseURI');
  } else if (dom.baseURI && !dom.baseURI.startsWith('chrome-extension://')) {
    effectiveBaseURI = dom.baseURI;
    console.log('DEBUG: Using dom.baseURI as baseURI');
  } else {
    // Fallback: try to extract base URL from the base element if it exists
    const baseElement = dom.head?.querySelector('base');
    console.log('DEBUG: baseElement =', baseElement);
    console.log('DEBUG: baseElement.href =', baseElement?.href);
    
    if (baseElement && baseElement.href && !baseElement.href.startsWith('chrome-extension://')) {
      effectiveBaseURI = baseElement.href;
      console.log('DEBUG: Using baseElement.href as baseURI');
    } else {
      // Last resort: use a generic base URL (this shouldn't happen in normal cases)
      console.warn('No valid base URI found, using fallback');
      effectiveBaseURI = 'https://example.com/';
    }
  }
  
  console.log('DEBUG: Final effectiveBaseURI =', effectiveBaseURI);
  article.baseURI = effectiveBaseURI;
  
  // also grab the page title
  article.pageTitle = dom.title;
  
  // and some URL info - use the effective base URI for consistency
  try {
    const url = new URL(effectiveBaseURI);
    article.hash = url.hash;
    article.host = url.host;
    article.origin = url.origin;
    article.hostname = url.hostname;
    article.pathname = url.pathname;
    article.port = url.port;
    article.protocol = url.protocol;
    article.search = url.search;
  } catch (error) {
    console.warn('Failed to parse effective base URI:', effectiveBaseURI, error);
    // Fallback to dom.baseURI if originalUrl parsing fails
    try {
      const fallbackUrl = new URL(dom.baseURI);
      article.hash = fallbackUrl.hash;
      article.host = fallbackUrl.host;
      article.origin = fallbackUrl.origin;
      article.hostname = fallbackUrl.hostname;
      article.pathname = fallbackUrl.pathname;
      article.port = fallbackUrl.port;
      article.protocol = fallbackUrl.protocol;
      article.search = fallbackUrl.search;
    } catch (fallbackError) {
      console.error('Failed to parse both original and DOM base URI:', error, fallbackError);
    }
  }
  
  // Add original URL information if provided
  if (originalUrl) {
    article.originalUrl = originalUrl;
  }

  // make sure the dom has a head
  if (dom.head) {
    // and the keywords, should they exist, as an array
    article.keywords = dom.head.querySelector('meta[name="keywords"]')?.content?.split(',')?.map(s => s.trim());

    // add all meta tags, so users can do whatever they want
    dom.head.querySelectorAll('meta[name][content], meta[property][content]')?.forEach(meta => {
      const key = (meta.getAttribute('name') || meta.getAttribute('property'))
      const val = meta.getAttribute('content')
      if (key && val && !article[key]) {
        article[key] = val;
      }
    })
  }

  article.math = math

  // return the article
  return article;
}

// function to convert the article content to markdown using Turndown
function turndown(content, options, article) {

  if (options.turndownEscape) TurndownService.prototype.escape = TurndownService.prototype.defaultEscape;
  else TurndownService.prototype.escape = s => s;

  var turndownService = new TurndownService(options);

  turndownService.use(turndownPluginGfm.gfm)

  turndownService.keep(['iframe', 'sub', 'sup', 'u', 'ins', 'del', 'small', 'big']);

  let imageList = {};
  // add an image rule
  turndownService.addRule('images', {
    filter: function (node, tdopts) {
      // if we're looking at an img node with a src
      if (node.nodeName == 'IMG' && node.getAttribute('src')) {
        
        // get the original src
        let src = node.getAttribute('src')
        // set the new src
        const validatedSrc = validateUri(src, article.baseURI);
        console.debug('Image src validation:', src, '->', validatedSrc, 'baseURI:', article.baseURI);
        node.setAttribute('src', validatedSrc);
        
        // if we're downloading images, there's more to do.
        if (options.downloadImages) {
          // generate a file name for the image
          let imageFilename = getImageFilename(src, options, false);
          if (!imageList[src] || imageList[src] != imageFilename) {
            // if the imageList already contains this file, add a number to differentiate
            let i = 1;
            while (Object.values(imageList).includes(imageFilename)) {
              const parts = imageFilename.split('.');
              if (i == 1) parts.splice(parts.length - 1, 0, i++);
              else parts.splice(parts.length - 2, 1, i++);
              imageFilename = parts.join('.');
            }
            // add it to the list of images to download later
            imageList[src] = imageFilename;
          }
          // check if we're doing an obsidian style link
          const obsidianLink = options.imageStyle.startsWith("obsidian");
          // figure out the (local) src of the image
          const localSrc = options.imageStyle === 'obsidian-nofolder'
            // if using "nofolder" then we just need the filename, no folder
            ? imageFilename.substring(imageFilename.lastIndexOf('/') + 1)
            // otherwise we may need to modify the filename to uri encode parts for a pure markdown link
            : imageFilename.split('/').map(s => obsidianLink ? s : encodeURI(s)).join('/')
          
          // set the new src attribute to be the local filename
          if(options.imageStyle != 'originalSource' && options.imageStyle != 'base64') node.setAttribute('src', localSrc);
          // pass the filter if we're making an obsidian link (or stripping links)
          return true;
        }
        else return true
      }
      // don't pass the filter, just output a normal markdown link
      return false;
    },
    replacement: function (content, node, tdopts) {
      // if we're stripping images, output nothing
      if (options.imageStyle == 'noImage') return '';
      // if this is an obsidian link, so output that
      else if (options.imageStyle.startsWith('obsidian')) return `![[${node.getAttribute('src')}]]`;
      // otherwise, a normal markdown link
      else {
        var alt = cleanAttribute(node.getAttribute('alt'));
        var src = node.getAttribute('src') || '';
        var title = cleanAttribute(node.getAttribute('title'));
        var titlePart = title ? ' "' + title + '"' : '';
        if (options.imageRefStyle == 'referenced') {
          var id = this.references.length + 1;
          this.references.push('[fig' + id + ']: ' + src + titlePart);
          return '![' + alt + '][fig' + id + ']';
        }
        else return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''
      }
    },
    references: [],
    append: function (options) {
      var references = '';
      if (this.references.length) {
        references = '\n\n' + this.references.join('\n') + '\n\n';
        this.references = []; // Reset references
      }
      return references
    }

  });

  // add a rule for links
  turndownService.addRule('links', {
    filter: (node, tdopts) => {
      // check that this is indeed a link
      if (node.nodeName == 'A' && node.getAttribute('href')) {
        // get the href
        const href = node.getAttribute('href');
        
        // Use the enhanced validateUri function with proper baseURI
        // The article.baseURI should now contain the originalUrl if available
        const validatedHref = validateUri(href, article.baseURI);
        
        // Add debug logging for anchor link processing
        if (isAnchorLink(href) || isRelativeToCurrentPage(href)) {
          console.debug('Processing anchor/relative link:', href, '->', validatedHref);
        }
        
        // set the new href
        node.setAttribute('href', validatedHref);
        
        // if we are to strip links, the filter needs to pass
        return options.linkStyle == 'stripLinks';
      }
      // we're not passing the filter, just do the normal thing.
      return false;
    },
    // if the filter passes, we're stripping links, so just return the content
    replacement: (content, node, tdopts) => content
  });

  // handle multiple lines math
  turndownService.addRule('mathjax', {
    filter(node, options) {
      return article.math.hasOwnProperty(node.id);
    },
    replacement(content, node, options) {
      const math = article.math[node.id];
      let tex = math.tex.trim().replaceAll('\xa0', '');

      if (math.inline) {
        tex = tex.replaceAll('\n', ' ');
        return `$${tex}$`;
      }
      else
        return `$$\n${tex}\n$$`;
    }
  });

  function repeat(character, count) {
    return Array(count + 1).join(character);
  }

  function convertToFencedCodeBlock(node, options) {
    node.innerHTML = node.innerHTML.replaceAll('<br-keep></br-keep>', '<br>');
    const langMatch = node.id?.match(/code-lang-(.+)/);
    const language = langMatch?.length > 0 ? langMatch[1] : '';

    const code = node.innerText;

    const fenceChar = options.fence.charAt(0);
    let fenceSize = 3;
    const fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');

    let match;
    while ((match = fenceInCodeRegex.exec(code))) {
      if (match[0].length >= fenceSize) {
        fenceSize = match[0].length + 1;
      }
    }

    const fence = repeat(fenceChar, fenceSize);

    return (
      '\n\n' + fence + language + '\n' +
      code.replace(/\n$/, '') +
      '\n' + fence + '\n\n'
    )
  }

  turndownService.addRule('fencedCodeBlock', {
    filter: function (node, options) {
      return (
        options.codeBlockStyle === 'fenced' &&
        node.nodeName === 'PRE' &&
        node.firstChild &&
        node.firstChild.nodeName === 'CODE'
      );
    },
    replacement: function (content, node, options) {
      return convertToFencedCodeBlock(node.firstChild, options);
    }
  });

  // handle <pre> as code blocks
  turndownService.addRule('pre', {
    filter: (node, tdopts) => {
      return node.nodeName == 'PRE'
             && (!node.firstChild || node.firstChild.nodeName != 'CODE')
             && !node.querySelector('img');
    },
    replacement: (content, node, tdopts) => {
      return convertToFencedCodeBlock(node, tdopts);
    }
  });

  let markdown = options.frontmatter + turndownService.turndown(content)
      + options.backmatter;

  // strip out non-printing special characters which CodeMirror displays as a red dot
  // see: https://codemirror.net/doc/manual.html#option_specialChars
  markdown = markdown.replace(/[\u0000-\u0008\u000b\u000c\u000e-\u001f\u007f-\u009f\u00ad\u061c\u200b-\u200f\u2028\u2029\ufeff\ufff9-\ufffc]/g, '');
  
  return { markdown: markdown, imageList: imageList };
}

function cleanAttribute(attribute) {
  return attribute ? attribute.replace(/(\n+\s*)+/g, '\n') : ''
}

// URL parsing cache to avoid repeated parsing of the same URLs
const urlParseCache = new Map();

// Safe URL parsing function to handle malformed URLs with caching
function safeUrlParse(urlString, baseUrl = null) {
  // Create cache key
  const cacheKey = baseUrl ? `${urlString}|${baseUrl}` : urlString;
  
  // Check cache first
  if (urlParseCache.has(cacheKey)) {
    return urlParseCache.get(cacheKey);
  }
  
  let result = null;
  try {
    if (baseUrl) {
      result = new URL(urlString, baseUrl);
    } else {
      result = new URL(urlString);
    }
  } catch (error) {
    console.warn('Failed to parse URL:', urlString, 'with base:', baseUrl, error);
  }
  
  // Cache the result (including null for failed parses)
  urlParseCache.set(cacheKey, result);
  
  // Limit cache size to prevent memory leaks
  if (urlParseCache.size > 1000) {
    const firstKey = urlParseCache.keys().next().value;
    urlParseCache.delete(firstKey);
  }
  
  return result;
}

// Helper function to check if a link is a pure anchor link (starts with #)
function isAnchorLink(href) {
  if (!href || typeof href !== 'string') {
    return false;
  }
  return href.startsWith('#') && href.length > 1;
}

// Helper function to check if a link is relative to the current page with an anchor
function isRelativeToCurrentPage(href) {
  if (!href || typeof href !== 'string') {
    return false;
  }
  
  // Check for patterns like "page.html#section" or "./page.html#section" or "../page.html#section"
  // but not absolute URLs or protocol-relative URLs
  if (href.includes('://') || href.startsWith('//')) {
    return false;
  }
  
  // Check if it contains an anchor
  const hashIndex = href.indexOf('#');
  if (hashIndex === -1) {
    return false;
  }
  
  // If it starts with #, it's a pure anchor link
  if (hashIndex === 0) {
    return true;
  }
  
  // Check if the part before # is a relative path
  const pathPart = href.substring(0, hashIndex);
  return !pathPart.startsWith('/') && !pathPart.includes('://');
}

// Helper function to validate anchor link validity
function validateAnchorLink(href, baseURI) {
  if (!href || typeof href !== 'string') {
    return false;
  }
  
  try {
    // Pure anchor links are always valid if they have content after #
    if (isAnchorLink(href)) {
      return href.length > 1; // Must have content after #
    }
    
    // For relative links with anchors, validate the base part
    if (isRelativeToCurrentPage(href)) {
      const hashIndex = href.indexOf('#');
      if (hashIndex > 0) {
        // Validate that we can construct a valid URL with the base URI
        const pathPart = href.substring(0, hashIndex);
        const baseUrl = new URL(baseURI);
        new URL(pathPart, baseUrl);
        return true;
      }
      return hashIndex === 0 && href.length > 1;
    }
    
    // For other types of links, try to parse as URL
    new URL(href);
    return true;
  } catch (error) {
    return false;
  }
}

function validateUri(href, baseURI) {
  console.log('DEBUG validateUri: href =', href, 'baseURI =', baseURI);
  
  // CRITICAL FIX: If baseURI starts with chrome-extension://, force use a proper base
  if (baseURI && baseURI.startsWith('chrome-extension://')) {
    console.warn('CRITICAL: Detected chrome-extension baseURI, this should not happen!');
    console.warn('Original baseURI:', baseURI);
    // Try to extract the real URL from somewhere else or use a fallback
    baseURI = 'https://github.com/'; // Fallback for GitHub pages
    console.warn('Using fallback baseURI:', baseURI);
  }
  
  // Special handling for anchor links
  if (isAnchorLink(href)) {
    // For pure anchor links (#section), return directly without any conversion
    return href;
  }
  
  if (isRelativeToCurrentPage(href)) {
    const hashIndex = href.indexOf('#');
    if (hashIndex > 0) {
      // For relative links with anchors, extract and preserve the anchor part
      const pathPart = href.substring(0, hashIndex);
      const anchorPart = href.substring(hashIndex);
      
      try {
        // Validate the path part can be resolved
        const baseUrl = safeUrlParse(baseURI);
        if (baseUrl) {
          const resolvedUrl = safeUrlParse(pathPart, baseUrl);
          if (resolvedUrl) {
            // Return the relative format with anchor preserved
            return pathPart + anchorPart;
          }
        }
        // If path resolution fails, return as-is
        console.warn('Failed to resolve relative anchor link:', href, 'with base:', baseURI);
        return href;
      } catch (error) {
        console.warn('Error processing relative anchor link:', href, error);
        return href;
      }
    } else if (hashIndex === 0) {
      // Pure anchor link, return as-is
      return href;
    }
  }
  
  // Original logic for other types of links with enhanced error handling
  const parsedUrl = safeUrlParse(href);
  if (parsedUrl) {
    // If it's already a valid absolute URL, return as-is
    return href;
  } else {
    // if it's not a valid url, that likely means we have to prepend the base uri
    const baseUrl = safeUrlParse(baseURI);
    if (!baseUrl) {
      console.error('Invalid base URI provided:', baseURI);
      return href; // Return original href if base URI is invalid
    }

    try {
      // if the href starts with '/', we need to go from the origin
      if (href.startsWith('/')) {
        href = baseUrl.origin + href;
      }
      // otherwise we need to go from the local folder
      else {
        href = baseUrl.href + (baseUrl.href.endsWith('/') ? '' : '/') + href;
      }
    } catch (error) {
      console.warn('Error constructing URL:', error);
      return href; // Return original href on error
    }
  }
  return href;
}

// Enhanced validateUri function with comprehensive fallback mechanisms
function validateUriWithFallback(href, baseURI, originalHref = null) {
  try {
    // First attempt with the enhanced validateUri
    const result = validateUri(href, baseURI);
    
    // Validate the result is a reasonable URL or anchor link
    if (result && (result.startsWith('#') || safeUrlParse(result))) {
      return result;
    }
    
    console.warn('validateUri returned invalid result:', result, 'for href:', href);
    
    // Fallback to original href if result is invalid
    return originalHref || href;
    
  } catch (error) {
    console.error('Critical error in validateUri:', error, 'href:', href, 'baseURI:', baseURI);
    
    // Final fallback - return the original href
    return originalHref || href;
  }
}

function getImageFilename(src, options, prependFilePath = true) {
  const slashPos = src.lastIndexOf('/');
  const queryPos = src.indexOf('?');
  let filename = src.substring(slashPos + 1, queryPos > 0 ? queryPos : src.length);

  let imagePrefix = (options.imagePrefix || '');

  // 完全禁用使用页面标题作为图片文件名前缀
  // 这可以避免长标题导致的文件名问题
  // 用户可以通过设置 options.imagePrefix 来自定义前缀
  
  if (filename.includes(';base64,')) {
    // this is a base64 encoded image, so what are we going to do for a filename here?
    filename = 'image.' + filename.substring(0, filename.indexOf(';'));
  }
  
  let extension = filename.substring(filename.lastIndexOf('.'));
  if (extension == filename) {
    // there is no extension, so we need to figure one out
    // for now, give it an 'idunno' extension and we'll process it later
    filename = filename + '.idunno';
  }

  filename = generateValidFileName(filename, options.disallowedChars);

  return imagePrefix + filename;
}

// function to turn the title into a valid file name
function generateValidFileName(title, disallowedChars = null) {
  if (!title) return title;
  else title = title + '';
  // remove < > : " / \ | ? * 
  var illegalRe = /[\/\?<>\\:\*\|":]/g;
  // and non-breaking spaces (thanks @Licat)
  var name = title.replace(illegalRe, "").replace(new RegExp('\u00A0', 'g'), ' ')
      // collapse extra whitespace
      .replace(new RegExp(/\s+/, 'g'), ' ')
      // remove leading/trailing whitespace that can cause issues when using {pageTitle} in a download path
      .trim();

  if (disallowedChars) {
    for (let c of disallowedChars) {
      if (`[\\^$.|?*+()`.includes(c)) c = `\\${c}`;
      name = name.replace(new RegExp(c, 'g'), '');
    }
  }
  
  return name;
}

async function preDownloadImages(imageList, markdown, options) {
  let newImageList = {};
  await Promise.all(Object.entries(imageList).map(async ([src, filename]) => {
    try {
      const response = await fetch(src);
      const blob = await response.blob();

      if (options.imageStyle == 'base64') {
        const reader = new FileReader();
        await new Promise((resolve, reject) => {
          reader.onloadend = resolve;
          reader.onerror = reject;
          reader.readAsDataURL(blob);
        });
        markdown = markdown.replaceAll(src, reader.result);
      } else {
        let newFilename = filename;
        if (newFilename.endsWith('.idunno')) {
          newFilename = filename.replace('.idunno', '.' + mimedb[blob.type]);
          if (!options.imageStyle.startsWith("obsidian")) {
            markdown = markdown.replaceAll(filename.split('/').map(s => encodeURI(s)).join('/'), newFilename.split('/').map(s => encodeURI(s)).join('/'))
          } else {
            markdown = markdown.replaceAll(filename, newFilename)
          }
        }
        const blobUrl = URL.createObjectURL(blob);
        newImageList[blobUrl] = newFilename;
      }
    } catch (error) {
      console.error('A network error occurred attempting to download ' + src, error);
    }
  }));

  return { imageList: newImageList, markdown: markdown };
}

// Test functions for anchor link processing
function runAnchorLinkTests() {
  console.log('Running anchor link tests...');
  
  // Test isAnchorLink function
  console.assert(isAnchorLink('#section') === true, 'isAnchorLink should return true for #section');
  console.assert(isAnchorLink('#') === false, 'isAnchorLink should return false for empty anchor');
  console.assert(isAnchorLink('http://example.com') === false, 'isAnchorLink should return false for absolute URL');
  console.assert(isAnchorLink('') === false, 'isAnchorLink should return false for empty string');
  console.assert(isAnchorLink(null) === false, 'isAnchorLink should return false for null');
  
  // Test isRelativeToCurrentPage function
  console.assert(isRelativeToCurrentPage('#section') === true, 'isRelativeToCurrentPage should return true for #section');
  console.assert(isRelativeToCurrentPage('page.html#section') === true, 'isRelativeToCurrentPage should return true for page.html#section');
  console.assert(isRelativeToCurrentPage('./page.html#section') === true, 'isRelativeToCurrentPage should return true for ./page.html#section');
  console.assert(isRelativeToCurrentPage('../page.html#section') === true, 'isRelativeToCurrentPage should return true for ../page.html#section');
  console.assert(isRelativeToCurrentPage('http://example.com#section') === false, 'isRelativeToCurrentPage should return false for absolute URL with anchor');
  console.assert(isRelativeToCurrentPage('/absolute/path#section') === false, 'isRelativeToCurrentPage should return false for absolute path with anchor');
  console.assert(isRelativeToCurrentPage('page.html') === false, 'isRelativeToCurrentPage should return false for relative path without anchor');
  
  // Test validateAnchorLink function
  const baseURI = 'https://example.com/path/page.html';
  console.assert(validateAnchorLink('#section', baseURI) === true, 'validateAnchorLink should return true for valid anchor');
  console.assert(validateAnchorLink('#', baseURI) === false, 'validateAnchorLink should return false for empty anchor');
  console.assert(validateAnchorLink('page.html#section', baseURI) === true, 'validateAnchorLink should return true for valid relative link with anchor');
  console.assert(validateAnchorLink('http://example.com', baseURI) === true, 'validateAnchorLink should return true for valid absolute URL');
  console.assert(validateAnchorLink('', baseURI) === false, 'validateAnchorLink should return false for empty string');
  
  // Test validateUri function with anchor links
  console.assert(validateUri('#section', baseURI) === '#section', 'validateUri should return anchor link unchanged');
  console.assert(validateUri('page.html#section', baseURI) === 'page.html#section', 'validateUri should preserve relative anchor links');
  
  // Test safeUrlParse function
  console.assert(safeUrlParse('https://example.com') !== null, 'safeUrlParse should parse valid URL');
  console.assert(safeUrlParse('invalid-url') === null, 'safeUrlParse should return null for invalid URL');
  console.assert(safeUrlParse('page.html', 'https://example.com/') !== null, 'safeUrlParse should parse relative URL with base');
  
  // Test validateUriWithFallback function
  console.assert(validateUriWithFallback('#section', baseURI) === '#section', 'validateUriWithFallback should handle anchor links');
  console.assert(validateUriWithFallback('invalid-url', 'invalid-base', 'fallback') === 'fallback', 'validateUriWithFallback should use fallback on error');
  
  console.log('Anchor link tests completed.');
}

// Run tests when in development mode (can be triggered manually)
if (typeof window !== 'undefined' && window.location && window.location.search.includes('test=anchor-links')) {
  runAnchorLinkTests();
}